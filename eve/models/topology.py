# generated by datamodel-codegen:
#   filename:  topology.schema.json
#   timestamp: 2022-01-09T22:11:44+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, Extra, Field, conint, constr


class Type(Enum):
    TopologyConfiguration = 'TopologyConfiguration'


class Vxlan(BaseModel):
    vni: Optional[int] = Field(None, title='VNI')
    vlan: Optional[int] = Field(None, title='VLAN')


class Vrf(BaseModel):
    name: Optional[constr(max_length=20)] = None
    l3vni: Optional[int] = Field(None, title='L3VNI')
    l3vlan: Optional[int] = Field(None, title='L3VLAN')


class Ipv4Address(BaseModel):
    class Config:
        extra = Extra.forbid

    address: str


class Ipv6Address(BaseModel):
    class Config:
        extra = Extra.forbid

    address: str


class Ipv4Interface(BaseModel):
    class Config:
        extra = Extra.forbid

    address: Ipv4Address
    subnet: str
    gateway: Ipv4Address


class Ipv6Interface(BaseModel):
    class Config:
        extra = Extra.forbid

    address: Ipv6Address
    subnet: str
    gateway: Ipv6Address


class Type1(Enum):
    ethernet = 'ethernet'
    loopback = 'loopback'
    child = 'child'


class Connection(BaseModel):
    hostname: constr(max_length=255)
    port: Optional[constr(max_length=255)] = None


class Type2(Enum):
    vlan = 'vlan'


class Type3(Enum):
    bridge = 'bridge'


class TransitItem(BaseModel):
    name: Optional[str] = None
    asn: Optional[int] = None
    remote: Optional[List[Union[Ipv4Address, Ipv6Address]]] = None


class BgpConfiguration(BaseModel):
    transit: Optional[List[TransitItem]] = Field(None, title='Transit')


class OspfConfiguration(BaseModel):
    __root__: Any = Field(
        ...,
        description='Represents the ospf configuration of a device',
        title='OSPF Configuration',
    )


class Routing(BaseModel):
    bgp: Optional[BgpConfiguration] = None
    ospf: Optional[OspfConfiguration] = None


class InterfaceConfiguration(BaseModel):
    name: constr(max_length=20)
    description: constr(max_length=255)
    mac: Optional[
        constr(regex=r'^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$', max_length=17)
    ] = None
    mtu: Optional[conint(ge=576, le=9216)] = None
    speed: Optional[conint(ge=0, le=1000000000)] = None
    enabled: Optional[bool] = True
    addresses: Optional[List[Union[Ipv4Address, Ipv6Address]]] = Field(
        None, title='Addresses'
    )
    tagged_vlans: Optional[List[int]] = Field(
        None,
        description='The list of VLANs this interface is tagged with',
        title='Tagged VLANs',
    )
    untagged_vlan: Optional[int] = Field(
        None,
        description='The VLAN this interface is untagged with',
        title='Untagged VLAN',
    )
    vrf: Optional[str] = Field(None, title='VRF')


class NetworkInterface(InterfaceConfiguration):
    type: Optional[Type1] = Field(
        None, description='Type of the Network Interface', title='Type'
    )
    connection: Optional[Connection] = Field(
        None,
        description='Represents a connection to a (network) device',
        title='Connection',
    )


class Vlan(InterfaceConfiguration):
    type: Optional[Type2] = Field(
        None, description='Type of the VLAN Interface', title='Type'
    )
    vrf: Optional[str] = Field(None, title='VRF')
    vlan_id: Optional[conint(ge=1, le=4094)] = Field(None, title='VLAN ID')


class BridgeInterface(InterfaceConfiguration):
    type: Optional[Type3] = None
    bridge_members: Optional[List[NetworkInterface]] = Field(
        None, title='Bridge Members'
    )


class JsonSchemaForTopologyConfiguration(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Type
    interfaces: Optional[List[Union[NetworkInterface, Vlan, BridgeInterface]]] = Field(
        None, title='Interfaces'
    )
    vxlans: Optional[List[Vxlan]] = Field(None, title='VXLANs')
    vrfs: Optional[List[Vrf]] = Field(None, title='VRFs')
    routing: Optional[Union[List, Routing]] = Field(None, title='Routing')
