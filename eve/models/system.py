# generated by datamodel-codegen:
#   filename:  system.schema.json
#   timestamp: 2022-01-09T14:03:02+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Extra, Field, constr


class Type(Enum):
    SystemConfiguration = 'SystemConfiguration'


class Netbox(BaseModel):
    class Config:
        extra = Extra.forbid

    manufacturer: Optional[str] = Field(
        None, description='Slug of the manufacturer in NetBox', title='Manufacturer'
    )
    model: Optional[str] = Field(
        None, description='Slug of the model in NetBox', title='Model'
    )
    role: Optional[str] = Field(
        None, description='Slug of the role in NetBox', title='Role'
    )
    asset_tag: Optional[str] = Field(
        None, description='Asset tag of the device', title='Asset Tag'
    )
    serial_number: Optional[str] = Field(
        None, description='Serial Number of the device', title='Serial Number'
    )


class Type1(Enum):
    Router = 'Router'
    Switch = 'Switch'
    Firewall = 'Firewall'
    WirelessRouter = 'WirelessRouter'
    WirelessSwitch = 'WirelessSwitch'
    WirelessAccessPoint = 'WirelessAccessPoint'


class Software(BaseModel):
    class Config:
        extra = Extra.forbid

    os: Optional[str] = Field(
        None, description='Operating System of the device', title='Operating System'
    )
    version: Optional[str] = Field(
        None, description='Version of the device', title='Version'
    )


class Ipv4Address(BaseModel):
    class Config:
        extra = Extra.forbid

    address: str


class Ipv6Address(BaseModel):
    class Config:
        extra = Extra.forbid

    address: str


class Ipv4Interface(BaseModel):
    class Config:
        extra = Extra.forbid

    address: Ipv4Address
    subnet: str
    gateway: Ipv4Address


class Ipv6Interface(BaseModel):
    class Config:
        extra = Extra.forbid

    address: Ipv6Address
    subnet: str
    gateway: Ipv6Address


class Location(BaseModel):
    datacenter: Optional[constr(max_length=64)] = None
    room: Optional[constr(max_length=64)] = None
    rack: Optional[constr(max_length=64)] = None
    shelf: Optional[constr(max_length=64)] = None


class Server(BaseModel):
    name: Optional[str] = None
    ipv4: Optional[Ipv4Address] = None
    ipv6: Optional[Ipv6Address] = None


class Dns(BaseModel):
    servers: Optional[List[Server]] = Field(None, title='DNS Servers')


class Server1(BaseModel):
    name: Optional[str] = None
    ipv4: Optional[Ipv4Address] = None
    ipv6: Optional[Ipv6Address] = None


class Tacacs(BaseModel):
    class Config:
        extra = Extra.forbid

    servers: Optional[List[Server1]] = Field(None, title='TACACS Servers')


class General(BaseModel):
    class Config:
        extra = Extra.allow

    hostname: constr(max_length=64)
    fqdn: constr(max_length=255)
    type: Type1
    tenant: constr(max_length=64)
    location: Location
    description: Optional[str] = None
    groups: Optional[List[str]] = Field(None, title='Groups')


class JsonSchemaForSystemConfiguration(BaseModel):
    class Config:
        extra = Extra.allow

    type: Type
    dns: Optional[Dns] = Field(None, title='DNS Configuration')
    tacacs: Optional[Tacacs] = Field(None, title='TACACS Configuration')
    netbox: Optional[Netbox] = Field(None, title='NetBox Configuration')
    general: Optional[General] = Field(None, title='General Settings')
    timezone: Optional[constr(regex=r'^([a-zA-Z]+\/[a-zA-Z]+)$')] = Field(
        'Europe/Berlin', description='Timezone for the device', title='Timezone'
    )
    software: Optional[Software] = Field(
        None, description='Software of the device', title='Software'
    )
