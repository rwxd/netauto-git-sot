# generated by datamodel-codegen:
#   filename:  device.schema.json
#   timestamp: 2022-01-08T13:07:28+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, Extra, Field, conint, constr


class Type(Enum):
    DeviceConfiguration = 'DeviceConfiguration'


class Type1(Enum):
    Router = 'Router'
    Switch = 'Switch'
    Firewall = 'Firewall'
    WirelessRouter = 'WirelessRouter'
    WirelessSwitch = 'WirelessSwitch'
    WirelessAccessPoint = 'WirelessAccessPoint'


class Manufacturer(Enum):
    Cisco = 'Cisco'
    Juniper = 'Juniper'
    Mellanox = 'Mellanox'
    Checkpoint = 'Checkpoint'


class Model(Enum):
    Cisco_Nexus = 'Cisco Nexus'
    Juniper_EX = 'Juniper EX'
    Juniper_QFX = 'Juniper QFX'
    Juniper_SRX = 'Juniper SRX'
    Juniper_SRX_Firewall = 'Juniper SRX-Firewall'
    Mellanox_XY = 'Mellanox XY'
    Checkpoint_ABC = 'Checkpoint ABC'


class Hardware(BaseModel):
    class Config:
        extra = Extra.allow

    manufacturer: Optional[Manufacturer] = None
    model: Optional[Model] = None
    serial_number: Optional[constr(max_length=64)] = Field(
        None, description='The serial number of the device'
    )
    asset_tag: Optional[constr(max_length=64)] = Field(
        None, description='The asset tag of the device'
    )


class Os(Enum):
    Cisco_IOS = 'Cisco IOS'
    Juniper_Junos = 'Juniper Junos'
    Cumulus_Linux = 'Cumulus Linux'
    Gaia_OS = 'Gaia OS'


class OsVersion(Enum):
    Cisco_IOS_12_4_9_T1 = 'Cisco IOS 12.4(9)T1'
    Cisco_IOS_12_4_7_a = 'Cisco IOS 12.4(7)a'
    Cisco_IOS_12_2_25_SEB4 = 'Cisco IOS 12.2(25)SEB4'


class Software(BaseModel):
    class Config:
        extra = Extra.allow

    os: Os
    os_version: OsVersion
    description: Optional[str] = None


class Ipv4Address(BaseModel):
    class Config:
        extra = Extra.forbid

    version: int
    address: str


class Ipv6Address(BaseModel):
    class Config:
        extra = Extra.forbid

    version: int
    address: str


class Ipv4Interface(BaseModel):
    class Config:
        extra = Extra.forbid

    address: Ipv4Address
    subnet: str
    gateway: Ipv4Address


class Ipv6Interface(BaseModel):
    class Config:
        extra = Extra.forbid

    address: Ipv6Address
    subnet: str
    gateway: Ipv6Address


class Type2(Enum):
    ethernet = 'ethernet'
    virtual = 'virtual'
    loopback = 'loopback'
    child = 'child'


class Type3(Enum):
    bridge = 'bridge'


class TransitItem(BaseModel):
    name: Optional[str] = None
    asn: Optional[int] = None
    remote: Optional[List[Union[Ipv4Address, Ipv6Address]]] = None


class BgpConfiguration(BaseModel):
    transit: Optional[List[TransitItem]] = Field(None, title='Transit')


class OspfConfiguration(BaseModel):
    __root__: Any = Field(
        ...,
        description='Represents the ospf configuration of a device',
        title='OSPF Configuration',
    )


class Location(BaseModel):
    datacenter: Optional[constr(regex=r'^[^\s]*$', max_length=64)] = None
    room: Optional[constr(regex=r'^[^\s]*$', max_length=64)] = None
    rack: Optional[constr(regex=r'^[^\s]*$', max_length=64)] = None
    shelf: Optional[constr(regex=r'^[^\s]*$', max_length=64)] = None


class Connection(BaseModel):
    hostname: constr(regex=r'^[^\s]*$', max_length=255)
    port: Optional[constr(regex=r'^[^\s]*$', max_length=255)] = None


class General(BaseModel):
    class Config:
        extra = Extra.allow

    hostname: constr(regex=r'^[^\s]*$', max_length=64)
    fqdn: constr(regex=r'^[^\s]*$', max_length=255)
    type: Type1
    tenant: constr(regex=r'^[^\s]*$', max_length=64)
    location: Location
    description: Optional[str] = None
    timezone: str


class Routing(BaseModel):
    bgp: Optional[BgpConfiguration] = None
    ospf: Optional[OspfConfiguration] = None


class InterfaceConfiguration(BaseModel):
    name: constr(regex=r'^[^\s]*$', max_length=20)
    description: constr(max_length=255)
    mac: Optional[
        constr(regex=r'^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$', max_length=17)
    ] = None
    mtu: Optional[conint(ge=576, le=9216)] = None
    speed: Optional[conint(ge=0, le=1000000000)] = None
    enabled: Optional[bool] = True
    connected_to: Optional[Connection] = Field(
        None, description='The name of the interface this interface is connected to'
    )
    addresses: Optional[List[Union[Ipv4Address, Ipv6Address]]] = Field(
        None, title='Addresses'
    )


class NetworkInterface(InterfaceConfiguration):
    type: Optional[Type2] = None


class BridgeInterface(InterfaceConfiguration):
    type: Optional[Type3] = None
    bridge_members: Optional[List[NetworkInterface]] = Field(
        None, title='Bridge Members'
    )


class JsonSchemaForNetworkConfiguration(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Type
    general: General = Field(..., title='General Settings')
    hardware: Hardware = Field(
        ..., description='The hardware of the device', title='Hardware'
    )
    software: Software = Field(
        ..., description='The software of the device', title='Software'
    )
    interfaces: Optional[List[Union[NetworkInterface, BridgeInterface]]] = Field(
        None, title='Interfaces'
    )
    routing: Optional[Union[List, Routing]] = Field(None, title='Routing')
