# generated by datamodel-codegen:
#   filename:  device.schema.json
#   timestamp: 2022-01-08T01:19:29+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Extra, Field, conint, constr


class Type(Enum):
    DeviceConfiguration = 'DeviceConfiguration'


class Hardware(BaseModel):
    class Config:
        extra = Extra.allow

    manufacturer: Optional[str] = None
    model: Optional[str] = None
    serial_number: Optional[str] = Field(
        None, description='The serial number of the device'
    )
    asset_tag: Optional[str] = None


class Software(BaseModel):
    class Config:
        extra = Extra.allow

    os: Optional[str] = None
    os_version: Optional[str] = None
    description: Optional[str] = None


class InterfaceSettings(BaseModel):
    name: constr(regex=r'^[^\s]*$', max_length=20)
    description: constr(max_length=255)
    mac: Optional[
        constr(regex=r'^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$', max_length=17)
    ] = None
    mtu: Optional[conint(ge=576, le=9216)] = None
    speed: Optional[conint(ge=0, le=1000000000)] = None
    enabled: Optional[bool] = True
    addresses: Optional[List] = Field(None, title='addresses')


class Type1(Enum):
    ethernet = 'ethernet'
    virtual = 'virtual'
    loopback = 'loopback'
    child = 'child'


class NetworkInterface(InterfaceSettings):
    type: Optional[Type1] = None


class Type2(Enum):
    bridge = 'bridge'


class BridgeInterface(InterfaceSettings):
    type: Optional[Type2] = None
    bridge_members: Optional[List[NetworkInterface]] = Field(
        None, title='Bridge Members'
    )


class Location(BaseModel):
    datacenter: Optional[constr(regex=r'^[^\s]*$', max_length=64)] = None
    room: Optional[constr(regex=r'^[^\s]*$', max_length=64)] = None
    rack: Optional[constr(regex=r'^[^\s]*$', max_length=64)] = None
    shelf: Optional[constr(regex=r'^[^\s]*$', max_length=64)] = None


class General(BaseModel):
    class Config:
        extra = Extra.allow

    hostname: constr(regex=r'^[^\s]*$', max_length=64)
    fqdn: constr(regex=r'^[^\s]*$', max_length=255)
    tenant: constr(regex=r'^[^\s]*$', max_length=64)
    location: Location
    description: Optional[str] = None
    timezone: str


class JsonSchemaForNetworkConfiguration(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Type
    general: Optional[General] = Field(None, title='General Settings')
    hardware: Optional[Hardware] = Field(None, title='Hardware')
    software: Optional[Software] = Field(None, title='Software')
    interfaces: Optional[List[Union[NetworkInterface, BridgeInterface]]] = Field(
        None, title='Interfaces'
    )
